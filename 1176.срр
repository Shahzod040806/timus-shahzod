/* 1176. Hyperchannels - http://acm.timus.ru/problem.aspx?num=1176
 *
 * Strategy:
 * This is essentially the same problem as 1136; we are to find the Euler path of the inverse of
 * the graph this time.
 *
 * Performance:
 * O(N^2), which is optimal since the input is of this size. The solution runs in 0.187s and uses
 * 896KB memory.
 */

#include <iostream>
#include <vector>
#include <stack>

using namespace std;

// Функция для поиска эйлеровой цепи в обратном графе
void eulerPath(const vector<vector<int>>& g, int start, vector<int>& path) {
    stack<int> st;
    st.push(start);

    while (!st.empty()) {
        int v = st.top();
        if (g[v].empty()) {
            path.push_back(v);
            st.pop();
        } else {
            int next = g[v].back();
            g[v].pop_back();
            st.push(next);
        }
    }
}

int main() {
    int n;
    cin >> n;

    vector<vector<int>> g(n);
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            int edge;
            cin >> edge;
            if (edge) {
                g[j].push_back(i);
            }
        }
    }

    vector<int> path;
    eulerPath(g, 0, path);

    reverse(path.begin(), path.end());
    for (size_t i = 0; i < path.size(); ++i) {
        cout << path[i] + 1 << " ";
    }

    return 0;
}
