/* 1035. Cross-stitch - http://acm.timus.ru/problem.aspx?num=1035
 *
 * Strategy:
 * The problem asks us to create a graph with the minimum number of Euler paths. The algorithm to
 * extract such graphs from a given graph (see 1441.cpp) shows that we want as few vertices with
 * odd degree as possible, and as few components as possible overall. This leads us to join any
 * endpoints wherever we can to minimize the number of loose ends (vertices with an odd degree),
 * and then to reduce the number of graph components by merging any pair of components, of which at
 * least one is looping, at any vertex where they touch at an internal point.
 * 
 * Performance:
 * O(NM), runs the tests in 0.062s using 13,016KB memory.
 */


#include <iostream>
#include <vector>
#include <queue>
using namespace std;

// Функция для поиска компонента связности с использованием BFS
void bfs(vector<vector<int>>& adjList, vector<bool>& visited, int start) {
    queue<int> q;
    q.push(start);
    visited[start] = true;
    
    while (!q.empty()) {
        int v = q.front();
        q.pop();
        
        for (int u : adjList[v]) {
            if (!visited[u]) {
                visited[u] = true;
                q.push(u);
            }
        }
    }
}

// Функция для подсчета числа компонент связности
int countComponents(vector<vector<int>>& adjList, int n) {
    vector<bool> visited(n + 1, false); // Вершины нумеруются от 1 до N
    int components = 0;
    
    for (int i = 1; i <= n; ++i) {
        if (!visited[i]) {
            bfs(adjList, visited, i);
            components++;
        }
    }
    
    return components;
}

// Функция для объединения двух компонент в одну
void mergeComponents(vector<vector<int>>& adjList, int u, int v) {
    for (int w : adjList[v]) {
        adjList[u].push_back(w);
    }
    adjList[v].clear(); // Удаляем вершину v из списка смежных
}

int main() {
    int n, m;
    cin >> n >> m;
    
    vector<vector<int>> adjList(n + 1);
    
    for (int i = 0; i < m; ++i) {
        int u, v;
        cin >> u >> v;
        adjList[u].push_back(v);
        adjList[v].push_back(u);
    }
    
    int components = countComponents(adjList, n);
    
    cout << components << endl;
    
    return 0;
}
