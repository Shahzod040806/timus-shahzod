/* 1286. Starship Travel - http://acm.timus.ru/problem.aspx?num=1286
 *
 * Strategy:
 * Using a move of (p, q) followed by a move of (p, -q) we can travel a length of (2p, 0) along the
 * x-axis, and by the same logic a length of 2q along the same axis. This means we can, along one
 * axis, travel (at least) in units of gcd(2p, 2q) = 2*gcd(p, q) = 2g. Since the previous argument
 * is true for the y axis as well, we can (at least) reach points in a grid of cell size 2g. If
 * exactly one of p and q is not divisible by 2g (meaning p or q divided by g is odd) we can also
 * escape to "in between" the 2g grid and reach any point in a grid of cell size g. If both are not
 * divisible by 2g, then we can escape in between the 2g grid exactly in the middle of a grid square
 * and not in between two orthogonal vertices, resulting in a checkerboard pattern. (And, both can't
 * be divisible by 2g since that would contradict the given gcd).
 *
 * Performance:
 * O(log(min(p, q))), runs the tests in 0.015s using 172KB memory.
 */


#include <iostream>
#include <algorithm>

using namespace std;

int gcd(int a, int b) {
    while (b) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

int main() {
    int p, q, x, y;
    cin >> p >> q >> x >> y;

    int g = gcd(p, q);
    int g2 = 2 * g;

    // Приведение координат к положительным значениям
    x = abs(x);
    y = abs(y);

    // Приведение к наименьшему общему знаменателю
    x %= g2;
    y %= g2;

    // Проверка возможности достижения точки
    if (x % g == 0 && y % g == 0) {
        cout << "Yes" << endl;
    } else {
        cout << "No" << endl;
    }

    return 0;
}
